@{
    ViewData["Title"] = "Tasks";
}
<h1>@ViewData["Title"]</h1>

<style>
    #challengeModeBox {
        border: 5px solid #E5E5E5;
        border-radius: 10px;
        margin-top: 10px;
        padding: 10px;
        background-color: #ffffff;
	}

	#challengeModeDimmerBackground {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 1000;
	}
	
	#challengeModeDimmerContent {
		position: relative;
		background-color: #ffffff;
		padding: 20px;
		border: 1px solid #cccccc;
		border-radius: 5px;
		margin: 20% auto;
		width: 60%;
		text-align: center;
		z-index: 1001;
	}

    #scoreAndExitButtonHolder {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }

    #challengeModeScoreDisplay {
        font-size: 20px;
    }

    .flashcardBoxFront {
        margin: auto;
        width: 200px;
        height: 100px;
        border: 5px solid #E5E5E5;
        border-radius: 10px;
        margin-top: 10px;
        padding: 10px;
        background-color: #ffffff;
    }

    .flashcardBoxBack {
        margin: auto;
        width: 250px;
        height: 100px;
        border: 5px solid #d1acac;
        border-radius: 10px;
        margin-top: 10px;
        padding: 10px;
        background-color: #e5d2d2;
    }
</style>

<div id="challengeModeBox">
    <h4>Challenge mode</h4>
    <div style="display: grid; grid-template-columns: 240px 150px 80px;">
        <div>
            <p>Challenge yourself with exam:</p>
        </div>
        <div>
            <select id="examsDropdown">
                <option selected disabled hidden value="default">Choose an exam</option>
            </select>
        </div>
        <div>
            <button onclick="startChallengeMode()">Start!</button>
            <div id="challengeModeDimmerBackground">
                <div id="challengeModeDimmerContent">
                    <div id="scoreAndExitButtonHolder">
                        <div>
                            <p id="challengeModeScoreDisplay" align="left">Score: 0</p>
                        </div>
                        <div style="text-align: right;">
                            <button id="challengeModeExitButton" align="right" onclick="stopChallengeMode()">X</button>
                        </div>
                    </div>
                    <h2 id="challengeModeTitle"></h2>

                    <p>Do you know the answer?</p>
                    <div id="flashcardBox" class="flashcardBoxFront"></div>

                    <button id="checkFlashcardAnswerButton" onclick="checkFlashcardAnswer()" style="margin: auto;">Check</button>
                    <div id="answerButtons" style="display: grid; grid-template-columns: 1fr 1fr;">
                        <button id="guessedButton" onclick="guessedAnswer()">I guessed right!</button>
                        <button id="forgotButton" onclick="forgotAnswer()">I forgot...</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    fetch(`/Tasks/FetchExamNames`)
    .then(response => response.json())
    .then(allExamNames => {
        if (allExamNames && Array.isArray(allExamNames.names) && allExamNames.names.length > 0)
        {
            allExamNames.names.forEach(examName => {
                newOption = new Option(examName, `${examName}Exam`);
                document.getElementById("examsDropdown").add(newOption, undefined);
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });

    async function getFlashcardsFromExam(examName) {
        try {
            const response = await fetch(`/Tasks/FetchFlashcardsOfExam?examName=${examName}`);
            const data = await response.json();

            if (data.errorCode === 'NoFlashcards')
            {
                alert(data.errorMessage);
                return "No flashcards.";
            }
            else
            {
                return data.flashcards;
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    var challengeScore;
    var currentQuestion;
    var flashcards;
    async function startChallengeMode()
    {
        const examDropdown = document.getElementById("examsDropdown");
        const examChosen = examDropdown.options[examDropdown.selectedIndex];
        if(examChosen.value === "default")
        {
            alert("Select an exam to challenge yourself on.");
            return;
        }

        resetChallengeWindow();
        flashcards = await getFlashcardsFromExam(examChosen.text);
        if(flashcards === "No flashcards.")
        {
            return;
        }
        else
        {
            flashcards = shuffle(flashcards);

            var dimmerBackground = document.getElementById("challengeModeDimmerBackground");
            dimmerBackground.style.display = "block";
            document.getElementById("challengeModeTitle").innerText = `${examChosen.text} challenge`;
            console.log(flashcards);
            updateChallengeWindow();
        }
	}

    function stopChallengeMode()
    {
        var dimmerBackground = document.getElementById("challengeModeDimmerBackground");
		dimmerBackground.style.display = "none";
	}

    function resetChallengeWindow()
    {
        challengeScore = 0;
        currentQuestion = 0;
        flashcards = null;
        updateChallengeScore(0);
    }

    function updateChallengeWindow()
    {
        var flashcardBox = document.getElementById("flashcardBox");
        if(flashcardBox.classList.contains("flashcardBoxBack"))
        {
            flashcardBox.classList.remove("flashcardBoxBack");
            flashcardBox.classList.add("flashcardBoxFront");
        }
        document.getElementById("checkFlashcardAnswerButton").style.display = 'block';
        document.getElementById("answerButtons").style.display = 'none';

        if(currentQuestion < flashcards.length)
        {
            flashcardBox.innerText = flashcards[currentQuestion].frontText;
        }
        else
        {
            console.log("End.");
            stopChallengeMode();
        }
    }

    function checkFlashcardAnswer()
    {
        flashcardBox.classList.remove("flashcardBoxFront");
        flashcardBox.classList.add("flashcardBoxBack");

        flashcardBox.innerText = flashcards[currentQuestion].backText;

        document.getElementById("checkFlashcardAnswerButton").style.display = 'none';
        document.getElementById("answerButtons").style.display = 'block';
    }

    function guessedAnswer()
    {
        challengeScore += 1;
        updateChallengeScore(challengeScore);

        ++currentQuestion;
        updateChallengeWindow();
    }

    function forgotAnswer()
    {
        stopChallengeMode();
    }

    function updateChallengeScore(score)
    {
        document.getElementById("challengeModeScoreDisplay").innerText = `Score: ${score}`;
    }

    function shuffle(array)
    {
        let currentIndex = array.length, randomIndex;
        while (currentIndex > 0) {

            randomIndex = Math.floor(Math.random() * currentIndex);
            --currentIndex;

            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }

        return array;
    }
</script>